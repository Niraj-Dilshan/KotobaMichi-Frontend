name: Deploy Production

on:
  workflow_run:
    workflows: ["Build and Publish Docker Image"]
    types: [completed]
  workflow_dispatch:
    inputs:
      next_public_api_url:
        description: "Override NEXT_PUBLIC_API_URL (optional)"
        required: false
        type: string
      frontend_port:
        description: "Override FRONTEND_PORT (optional, default 8080)"
        required: false
        type: string

permissions:
  contents: read
  packages: read

concurrency:
  group: deploy-production
  cancel-in-progress: false

jobs:
  deploy:
    # Only proceed if manual dispatch OR publish workflow succeeded on 'production' branch
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'workflow_run' &&
       github.event.workflow_run.conclusion == 'success' &&
       github.event.workflow_run.head_branch == 'production')
    runs-on:
      - serverone
      - self-hosted
    timeout-minutes: 20

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create .env for production
        id: write-env
        shell: bash
        env:
          NEXT_PUBLIC_API_URL_INPUT: ${{ inputs.next_public_api_url }}
          NEXT_PUBLIC_API_URL_SECRET: ${{ secrets.PROD_NEXT_PUBLIC_API_URL }}
          NEXT_PUBLIC_API_URL_VAR: ${{ vars.NEXT_PUBLIC_API_URL }}
          FRONTEND_PORT_INPUT: ${{ inputs.frontend_port }}
          FRONTEND_PORT_VAR: ${{ vars.FRONTEND_PORT }}
        run: |
          set -euo pipefail

          # Prefer: manual input > repo/org secret > repo/org var > default
          NEXT_PUBLIC_API_URL="${NEXT_PUBLIC_API_URL_INPUT:-}"; [ -n "$NEXT_PUBLIC_API_URL" ] || NEXT_PUBLIC_API_URL="${NEXT_PUBLIC_API_URL_SECRET:-}"; [ -n "$NEXT_PUBLIC_API_URL" ] || NEXT_PUBLIC_API_URL="${NEXT_PUBLIC_API_URL_VAR:-}"
          FRONTEND_PORT="${FRONTEND_PORT_INPUT:-${FRONTEND_PORT_VAR:-8080}}"

          if [ -z "$NEXT_PUBLIC_API_URL" ]; then
            echo "NEXT_PUBLIC_API_URL is required but was not provided (inputs.next_public_api_url / secrets.PROD_NEXT_PUBLIC_API_URL / vars.NEXT_PUBLIC_API_URL)." >&2
            exit 1
          fi

          {
            echo "# Auto-generated by CI on $(date -u)"
            echo "NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL"
            echo "FRONTEND_PORT=$FRONTEND_PORT"
          } > .env

          echo "env_path=.env" >> "$GITHUB_OUTPUT"
          echo "next_public_api_url=$NEXT_PUBLIC_API_URL" >> "$GITHUB_OUTPUT"
          echo "frontend_port=$FRONTEND_PORT" >> "$GITHUB_OUTPUT"

      - name: Ensure external Docker network exists
        shell: bash
        run: |
          set -euo pipefail
          docker network inspect kotobamichi-network >/dev/null 2>&1 || docker network create kotobamichi-network

      - name: Pull latest images
        shell: bash
        run: |
          set -euo pipefail
          docker compose -f docker-compose.prod.yml pull

      - name: Start/Update stack
        shell: bash
        run: |
          set -euo pipefail
          docker compose -f docker-compose.prod.yml up -d

      - name: Show status
        shell: bash
        run: |
          docker compose -f docker-compose.prod.yml ps
          echo "--- Recent logs (web) ---"
          docker compose -f docker-compose.prod.yml logs --tail=80 web || true

      - name: Verify SEO endpoints (sitemap and robots)
        shell: bash
        run: |
          set -euo pipefail
          echo "Checking /sitemap.xml"
          docker exec kotobamichi-web curl -fsS http://localhost:3000/sitemap.xml >/dev/null
          echo "Checking /robots.txt"
          docker exec kotobamichi-web curl -fsS http://localhost:3000/robots.txt >/dev/null
          echo "OK: sitemap.xml and robots.txt are reachable inside the container"

      - name: Deployment summary
        shell: bash
        run: |
          echo "Deployment completed on $(hostname) at $(date -u)." >> "$GITHUB_STEP_SUMMARY"
          echo "FRONTEND_PORT: ${{ steps.write-env.outputs.frontend_port }}" >> "$GITHUB_STEP_SUMMARY"
          echo "NEXT_PUBLIC_API_URL: ${{ steps.write-env.outputs.next_public_api_url }}" >> "$GITHUB_STEP_SUMMARY"
